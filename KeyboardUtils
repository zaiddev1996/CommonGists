import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.ime
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.State
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.platform.LocalDensity

@Composable
fun rememberKeyboardAnimationState(): State<KeyboardState> {
    val density = LocalDensity.current
    val keyboardState = remember { mutableStateOf<KeyboardState>(KeyboardState.Closed) }
    var previousHeight by remember { mutableIntStateOf(0) }

    val windowInsets = WindowInsets.ime
    val keyboardHeight = with(density) { windowInsets.getBottom(density) }

    LaunchedEffect(keyboardHeight) {
        keyboardState.value = when {
            keyboardHeight > 0 && keyboardHeight >= previousHeight -> KeyboardState.Opened
            keyboardHeight > 0 && keyboardHeight < previousHeight -> KeyboardState.Closing
            else -> KeyboardState.Closed
        }
        previousHeight = keyboardHeight
    }

    return keyboardState
}

sealed class KeyboardState {
    object Opened : KeyboardState()
    object Closing : KeyboardState()
    object Closed : KeyboardState()
}
