import android.graphics.Bitmap
import android.graphics.Paint
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clipToBounds
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.StrokeJoin
import androidx.compose.ui.graphics.asAndroidPath
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.framework.ui.components.beforeafter.detectMotionEvents
import com.framework.utils.getImageResolutionWithExif
import com.framework.utils.toFilesDirPath
import kotlinx.coroutines.launch
import timber.log.Timber
import java.io.File
import kotlin.math.roundToInt

@Composable
fun ImageMasking(
    modifier: Modifier = Modifier,
    image: String,
    onMaskingDone: (Bitmap) -> Unit,
    brushSize: Dp = 30.dp,
    showBrush: Boolean,
    showLoading: Boolean
) {
    var path by remember { mutableStateOf(Path()) }
    var currentPosition by remember { mutableStateOf(Offset.Unspecified) }
    var canvasSize by remember { mutableStateOf(IntSize(0, 0)) }
    val scope = rememberCoroutineScope()
    var thumbPressed by remember { mutableStateOf(false) }
    val density = LocalDensity.current
    val maskColor = MaterialTheme.colorScheme.primary.copy(0.5f)
    val brushSizePx = remember(brushSize) { with(density) { brushSize.toPx() } }
    val infiniteTransition = rememberInfiniteTransition(label = "")
    val animatingAlpha by infiniteTransition.animateFloat(
        initialValue = 1f,
        targetValue = 0.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(durationMillis = 800, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse,
        ),
        label = "",
    )
    val context = LocalContext.current
    val imageSize =
        remember(image) { File(context.toFilesDirPath(image)).getImageResolutionWithExif() }

    LaunchedEffect(showLoading) {
        if (!showLoading) {
            path = Path()
            currentPosition = Offset.Unspecified
        }
    }

    Timber.d("AspectRatioMasking: ${imageSize.first.toFloat() / imageSize.second.toFloat()}")

    Box(
        modifier
            .aspectRatio(imageSize.first.toFloat() / imageSize.second.toFloat())
            .background(Color.Black)
    ) {
        AsyncImage(
            model = image,
            contentDescription = "",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Canvas(
            modifier = Modifier
                .alpha(if (showLoading) animatingAlpha else 1f)
                .fillMaxSize()
                .clipToBounds()
//                .background(Color.Red)
                .onGloballyPositioned { cords -> canvasSize = cords.size }
                .pointerInput(brushSize, showLoading) {
                    if (!showLoading)
                        detectDragGestures(
                            onDragStart = { offset ->
                                path.moveTo(offset.x, offset.y)
                                currentPosition = offset
                            },
                            onDrag = { change, _ ->
                                path.lineTo(change.position.x, change.position.y)
                                currentPosition = change.position
                            },
                            onDragEnd = {
                                thumbPressed = false
                                scope
                                    .launch {
                                        onMaskingDone(
                                            path.createBitmap(
                                                canvasWidth = canvasSize.width,
                                                canvasHeight = canvasSize.height,
                                                targetWidth = imageSize.first,
                                                targetHeight = imageSize.second,
                                                strokeWidth = brushSizePx
                                            )
                                        )
                                    }
                                    .invokeOnCompletion {

                                    }
                            },
                            onDragCancel = {}
                        )
                }
                .pointerInput(showLoading) {
                    if (!showLoading)
                        detectMotionEvents(
                            onDown = {
                                currentPosition = it.position
                                thumbPressed = true
                            },
                            onUp = { thumbPressed = false }
                        )
                }
        ) {
            if (currentPosition != Offset.Unspecified) {
                drawPath(
                    path = path,
                    color = maskColor,
                    style = Stroke(
                        width = brushSize.toPx(),
                        cap = StrokeCap.Round,
                        join = StrokeJoin.Round
                    )
                )
            }
        }
        if (showBrush || thumbPressed)
            Box(
                modifier = Modifier
                    .size(brushSize)
                    .then(
                        if (currentPosition == Offset.Unspecified)
                            Modifier.align(Alignment.Center)
                        else Modifier.offset {
                            IntOffset(
                                x = (currentPosition.x - with(density) { brushSize.toPx() } / 2).roundToInt(),
                                y = (currentPosition.y - with(density) { brushSize.toPx() } / 2).roundToInt()
                            )
                        })
                    .background(color = Color.Black.copy(0.7f), shape = CircleShape)
                    .border(
                        width = 2.dp,
                        color = MaterialTheme.colorScheme.primary,
                        shape = CircleShape
                    )
            ) {
                Box(
                    modifier = Modifier
                        .align(Alignment.Center)
                        .size(8.dp)
                        .border(
                            width = 1.dp,
                            color = MaterialTheme.colorScheme.outline,
                            shape = CircleShape
                        )
                )
            }
    }
}

private fun Path.createBitmap(
    canvasWidth: Int,
    canvasHeight: Int,
    targetWidth: Int = 1024,
    targetHeight: Int = 1024,
    strokeWidth: Float
): Bitmap {
    // First create bitmap with canvas size
    val tempBitmap = Bitmap.createBitmap(
        canvasWidth,
        canvasHeight,
        Bitmap.Config.ARGB_8888
    )

    // Draw the path on temp bitmap
    val tempCanvas = android.graphics.Canvas(tempBitmap)
    tempCanvas.drawColor(Color.Transparent.toArgb())

    val paint = Paint().apply {
        color = Color.White.toArgb()
        style = Paint.Style.STROKE
        setStrokeWidth(strokeWidth)
        strokeCap = Paint.Cap.ROUND
        strokeJoin = Paint.Join.ROUND
    }

    tempCanvas.drawPath(asAndroidPath(), paint)

    // Create final bitmap with target dimensions
    val finalBitmap = Bitmap.createScaledBitmap(
        tempBitmap,
        targetWidth,
        targetHeight,
        true
    )

    // Recycle temp bitmap
    tempBitmap.recycle()

    return finalBitmap
}
